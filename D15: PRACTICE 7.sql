-- EXERCISE 1
 WITH YEARLY_SPEND 
 AS
  (SELECT EXTRACT(YEAR FROM TRANSACTION_DATE) AS YEAR,
    PRODUCT_ID,
    SPEND AS CURR_YEAR_SPEND,
    LAG(SPEND) OVER
      (PARTITION BY PRODUCT_ID 
      ORDER BY PRODUCT_ID, 
        EXTRACT(YEAR FROM TRANSACTION_DATE)) AS PREV_YEAR_SPEND
  FROM USER_TRANSACTIONS)
SELECT YEAR,
  PRODUCT_ID,
  CURR_YEAR_SPEND,
  PREV_YEAR_SPEND,
  ROUND(100*(CURR_YEAR_SPEND-PREV_YEAR_SPEND)/PREV_YEAR_SPEND, 2) AS YOY_RATE
FROM YEARLY_SPEND;

-- EXERCISE 2
WITH CARD_LAUNCH
AS
  (SELECT CARD_NAME,
    ISSUED_AMOUNT,
    MAKE_DATE(ISSUE_YEAR, ISSUE_MONTH, 1) AS ISSUE_MONTH,
    MIN(MAKE_DATE(ISSUE_YEAR, ISSUE_MONTH, 1)) OVER
      (PARTITION BY CARD_NAME) AS LAUNCH_MONTH
  FROM MONTHLY_CARDS_ISSUED)
SELECT CARD_NAME,
  ISSUED_AMOUNT
FROM CARD_LAUNCH
WHERE ISSUE_MONTH = LAUNCH_MONTH
ORDER BY ISSUED_AMOUNT DESC;

-- EXERCISE 3
SELECT USER_ID,
  SPEND,
  TRANSACTION_DATE
FROM
  (SELECT USER_ID,
    SPEND,
    ROW_NUMBER() OVER
      (PARTITION BY USER_ID
      ORDER BY TRANSACTION_DATE) AS THIRD_RANK,
    TRANSACTION_DATE
  FROM TRANSACTIONS) AS USER_THIRD_TRANS
WHERE THIRD_RANK = 3;

-- EXERCISE 4
WITH LATEST_TRANS
AS
  (SELECT TRANSACTION_DATE,
    USER_ID,
    PRODUCT_ID,
    RANK() OVER
      (PARTITION BY USER_ID
      ORDER BY TRANSACTION_DATE DESC) AS TRANS_RANK
  FROM USER_TRANSACTIONS)
SELECT DISTINCT USER_ID, 
  COUNT(PRODUCT_ID) OVER
    (PARTITION BY USER_ID) AS PURCHASE_COUNT,
  TRANSACTION_DATE
FROM LATEST_TRANS
WHERE TRANS_RANK = 1
ORDER BY TRANSACTION_DATE;

-- EXERCISE 5
SELECT 
    USER_ID,
    TWEET_DATE,
    ROUND(AVG(TWEET_COUNT) OVER
      (PARTITION BY USER_ID
      ORDER BY TWEET_DATE
      ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 2) AS ROLLING_AVG_3D
FROM TWEETS
ORDER BY USER_ID, TWEET_DATE;

/* ROWS specifies a physical count of rows, particularly useful in time-series analysis 
while ensuring the calculations remain consistent and relevant to the immediate dataset surrounding each point. */

-- EXERCISE 6
WITH PAYMENTS
AS
  (SELECT
    TRANSACTION_ID,
    MERCHANT_ID,
    CREDIT_CARD_ID,
    AMOUNT,
    TRANSACTION_TIMESTAMP,
    (EXTRACT(HOUR FROM TRANSACTION_TIMESTAMP)*60 + EXTRACT(MINUTE FROM TRANSACTION_TIMESTAMP)) - 
    (EXTRACT(HOUR 
      FROM LAG(TRANSACTION_TIMESTAMP) OVER
      (PARTITION BY 
        MERCHANT_ID,
        CREDIT_CARD_ID,
        AMOUNT
      ORDER BY TRANSACTION_TIMESTAMP))*60 + 
    EXTRACT(MINUTE
      FROM LAG(TRANSACTION_TIMESTAMP) OVER
      (PARTITION BY 
        MERCHANT_ID,
        CREDIT_CARD_ID,
        AMOUNT
      ORDER BY TRANSACTION_TIMESTAMP))) AS TIME_DIFF
  FROM TRANSACTIONS)
SELECT
  COUNT(MERCHANT_ID) AS PAYMENT_COUNT
FROM PAYMENTS
WHERE TIME_DIFF <= 10

-- EXERCISE 7
WITH ELECTRONICS_RANKED_PRODUCTS
AS
  (SELECT CATEGORY, PRODUCT,
  SUM(SPEND) AS TOTAL_SPEND
  FROM PRODUCT_SPEND
  WHERE EXTRACT(YEAR FROM TRANSACTION_DATE) = 2022
  GROUP BY CATEGORY, PRODUCT
  HAVING CATEGORY = 'electronics'
  ORDER BY TOTAL_SPEND DESC
  LIMIT 2),
APPLIANCE_RANKED_PRODUCTS AS
  (SELECT CATEGORY, PRODUCT,
  SUM(SPEND) AS TOTAL_SPEND
  FROM PRODUCT_SPEND
  WHERE EXTRACT(YEAR FROM TRANSACTION_DATE) = 2022
  GROUP BY CATEGORY, PRODUCT
  HAVING CATEGORY = 'appliance'
  ORDER BY TOTAL_SPEND DESC
  LIMIT 2)
SELECT CATEGORY, PRODUCT, TOTAL_SPEND
FROM APPLIANCE_RANKED_PRODUCTS
UNION ALL 
SELECT CATEGORY, PRODUCT, TOTAL_SPEND
FROM ELECTRONICS_RANKED_PRODUCTS 

-- EXERCISE 8
WITH TOP_10
AS
  (SELECT 
    A.ARTIST_NAME,
    DENSE_RANK() OVER
      (ORDER BY COUNT(*) DESC) AS ARTIST_RANK
  FROM ARTISTS A
  JOIN SONGS S
    ON A.ARTIST_ID = S.ARTIST_ID
  JOIN GLOBAL_SONG_RANK R
    ON R.SONG_ID = S.SONG_ID
  WHERE R.RANK <= 10
  GROUP BY A.ARTIST_NAME)
SELECT 
  ARTIST_NAME,
  ARTIST_RANK
FROM TOP_10
WHERE ARTIST_RANK <= 5;

--
