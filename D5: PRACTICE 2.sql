-- EXERCISE 1
SELECT DISTINCT CITY FROM STATION
WHERE ID%2=0;

-- EXERCISE 2
SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION;

-- EXERCISE 3
SELECT
CEILING(AVG(SALARY - REPLACE(SALARY, 0, ""))) AS ERROR_AMOUNT
FROM EMPLOYEES;

-- EXERCISE 4
SELECT
ROUND(CAST(SUM(ITEM_COUNT*ORDER_OCCURRENCES) / SUM(ORDER_OCCURRENCES) AS DECIMAL), 1) AS MEAN 
FROM ITEMS_PER_ORDER;

-- EXERCISE 5
SELECT CANDIDATE_ID FROM CANDIDATES
WHERE SKILL IN ('Python', 'Tableau', 'PostgreSQL')
GROUP BY CANDIDATE_ID
HAVING COUNT(SKILL)=3;

-- EXERCISE 6
SELECT USER_ID,
DATE(MAX(POST_DATE)) - DATE(MIN(POST_DATE)) AS DAY_BETWEEN
FROM POSTS
WHERE POST_DATE BETWEEN '01-01-2021' AND '01-01-2022'
GROUP BY USER_ID
HAVING COUNT(POST_ID) >= 2;

-- EXERCISE 7
SELECT CARD_NAME,
MAX(ISSUED_AMOUNT) - MIN(ISSUED_AMOUNT) AS DIFFERENCE
FROM MONTHLY_CARDS_ISSUED
GROUP BY CARD_NAME
ORDER BY DIFFERENCE DESC;

-- EXERCISE 8
--COGS = COST_OF_GOODS_SOLD
SELECT MANUFACTURER,
COUNT(DRUG) AS DRUG_COUNT,
ABS(SUM(COGS-TOTAL_SALES)) AS TOTAL_LOSS
FROM PHARMACY_SALES
WHERE TOTAL_SALES < COGS
GROUP BY MANUFACTURER
ORDER BY TOTAL_LOSS DESC;

-- EXERCISE 9
SELECT * FROM CINEMA
WHERE ID%2!=0
AND NOT DESCRIPTION = 'BORING' -- AND DESCRIPTION <> 'BORING'
ORDER BY RATING DESC;

-- EXERCISE 10
SELECT TEACHER_ID,
COUNT(DISTINCT SUBJECT_ID) AS CNT
FROM TEACHER
GROUP BY TEACHER_ID;

-- EXERCISE 11
SELECT USER_ID,
COUNT(FOLLOWER_ID) AS FOLLOWERS_COUNT
FROM FOLLOWERS
GROUP BY USER_ID
ORDER BY USER_ID;

-- EXERCISE 12
SELECT CLASS FROM COURSES
GROUP BY CLASS
HAVING COUNT(STUDENT) >= 5;

--
